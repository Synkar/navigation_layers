#!/usr/bin/env python
PACKAGE = "range_sensor_layer"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add('enabled',               		bool_t, 0, 'Whether to apply this plugin or not', True)
gen.add('enable_variable_constraints', 	bool_t, 0,  'Whether or not to vary sensor model constraints with the measured range', True)
gen.add('range_constraints',            double_t, 0, 'The distance tolerance between the target cell and the sonar origin to consider it as occupied (normally use the same of the costmap resolution)', 0.05)
gen.add('phi',                 			double_t, 0, 'Phi value', 1.2)
gen.add('inflate_cone',        			double_t, 0, 'Inflate the triangular area covered by the sensor (percentage)', 1, 0, 1)
gen.add('no_readings_timeout', 			double_t, 0, 'No Readings Timeout', 0.0, 0.0)
gen.add('clear_threshold',     			double_t, 0, 'Probability below which cells are marked as free', 0.2, 0.0, 1.0)
gen.add('mark_threshold',      			double_t, 0, 'Probability above which cells are marked as occupied', 0.8, 0.0, 1.0)
gen.add('clear_on_max_reading',  		bool_t, 0, 'Clear on max reading', False)
gen.add('use_decay',  			 		bool_t, 0, 'Use decay time for measurements', False)
gen.add('pixel_decay',  	   			double_t, 0, 'Time in seconds for pixel decay', 10.0, 0.0, 30.0)
gen.add('mark_on_max_reading',  		bool_t, 0,  'Mark on max reading', True)

exit(gen.generate(PACKAGE, PACKAGE, "RangeSensorLayer"))
